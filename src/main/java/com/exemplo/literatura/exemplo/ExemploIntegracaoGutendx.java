package com.exemplo.literatura.exemplo;

import com.exemplo.literatura.dto.GutendxResponse;
import com.exemplo.literatura.dto.LivroDto;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.URI;
import java.time.Duration;
import java.util.List;

/**
 * Exemplo pr√°tico mostrando como HttpClient, HttpRequest e HttpResponse
 * s√£o utilizados na integra√ß√£o com a API Gutendx no projeto de literatura.
 */
public class ExemploIntegracaoGutendx {
    
    private static final String BASE_URL = "https://gutendx.com/books/";
    private final HttpClient httpClient;
    private final ObjectMapper objectMapper;
    
    public ExemploIntegracaoGutendx() {
        // 1. CONFIGURA√á√ÉO DO HttpClient
        this.httpClient = HttpClient.newBuilder()
            .connectTimeout(Duration.ofSeconds(10))
            .followRedirects(HttpClient.Redirect.NORMAL)
            .version(HttpClient.Version.HTTP_2)
            .build();
        
        this.objectMapper = new ObjectMapper();
    }
    
    public static void main(String[] args) {
        System.out.println("======================================================================");
        System.out.println("üìö EXEMPLO: Integra√ß√£o com API Gutendx usando HttpClient");
        System.out.println("======================================================================\n");
        
        ExemploIntegracaoGutendx exemplo = new ExemploIntegracaoGutendx();
        
        // Demonstrar diferentes tipos de busca
        exemplo.demonstrarBuscaPorTitulo("pride");
        exemplo.demonstrarBuscaPorAutor("shakespeare");
        exemplo.demonstrarBuscaPorIdioma("pt");
        exemplo.demonstrarTratamentoErros();
    }
    
    private void demonstrarBuscaPorTitulo(String titulo) {
        System.out.println("üîç 1. BUSCA POR T√çTULO: '" + titulo + "'");
        System.out.println("=====================================");
        
        try {
            // 2. CONSTRU√á√ÉO DO HttpRequest
            String url = BASE_URL + "?search=" + titulo + "&page_size=3";
            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(url))
                .header("Accept", "application/json")
                .header("User-Agent", "Literatura-App/1.0")
                .timeout(Duration.ofSeconds(30))
                .GET()
                .build();
            
            System.out.println("üì° Enviando requisi√ß√£o para: " + url);
            System.out.println("üîß Headers configurados:");
            System.out.println("   ‚Ä¢ Accept: application/json");
            System.out.println("   ‚Ä¢ User-Agent: Literatura-App/1.0");
            System.out.println("   ‚Ä¢ Timeout: 30 segundos");
            
            // 3. ENVIO DA REQUISI√á√ÉO E OBTEN√á√ÉO DO HttpResponse
            HttpResponse<String> response = httpClient.send(request, 
                HttpResponse.BodyHandlers.ofString());
            
            // 4. AN√ÅLISE DO HttpResponse
            System.out.println("\nüìä Resposta recebida:");
            System.out.println("   ‚Ä¢ Status Code: " + response.statusCode());
            System.out.println("   ‚Ä¢ Content-Type: " + 
                response.headers().firstValue("content-type").orElse("N/A"));
            System.out.println("   ‚Ä¢ Content-Length: " + 
                response.headers().firstValue("content-length").orElse("N/A"));
            
            if (response.statusCode() == 200) {
                // 5. CONVERS√ÉO JSON PARA OBJETOS JAVA
                GutendxResponse gutendxResponse = objectMapper.readValue(
                    response.body(), GutendxResponse.class);
                
                System.out.println("   ‚Ä¢ Total de livros encontrados: " + gutendxResponse.getCount());
                System.out.println("   ‚Ä¢ Livros nesta p√°gina: " + gutendxResponse.getResults().size());
                
                System.out.println("\nüìñ Primeiros livros encontrados:");
                for (LivroDto livro : gutendxResponse.getResults()) {
                    System.out.println("   ‚Ä¢ " + livro.getTitle() + 
                        " (ID: " + livro.getId() + ")");
                }
            }
            
        } catch (Exception e) {
            System.out.println("‚ùå Erro na busca por t√≠tulo: " + e.getMessage());
        }
        System.out.println();
    }
    
    private void demonstrarBuscaPorAutor(String autor) {
        System.out.println("üë§ 2. BUSCA POR AUTOR: '" + autor + "'");
        System.out.println("===================================");
        
        try {
            // Exemplo de URL com m√∫ltiplos par√¢metros
            String url = BASE_URL + "?search=" + autor + "&page_size=2&sort=popular";
            
            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(url))
                .header("Accept", "application/json")
                .GET()
                .build();
            
            System.out.println("üì° URL com m√∫ltiplos par√¢metros: " + url);
            
            HttpResponse<String> response = httpClient.send(request, 
                HttpResponse.BodyHandlers.ofString());
            
            System.out.println("üìä Status: " + response.statusCode());
            
            if (response.statusCode() == 200) {
                GutendxResponse gutendxResponse = objectMapper.readValue(
                    response.body(), GutendxResponse.class);
                
                System.out.println("üìö Livros de " + autor + ":");
                gutendxResponse.getResults().forEach(livro -> {
                    System.out.println("   ‚Ä¢ " + livro.getTitle());
                    if (!livro.getAuthors().isEmpty()) {
                        System.out.println("     Autor: " + 
                            livro.getAuthors().get(0).getName());
                    }
                });
            }
            
        } catch (Exception e) {
            System.out.println("‚ùå Erro na busca por autor: " + e.getMessage());
        }
        System.out.println();
    }
    
    private void demonstrarBuscaPorIdioma(String idioma) {
        System.out.println("üåç 3. BUSCA POR IDIOMA: '" + idioma + "'");
        System.out.println("====================================");
        
        try {
            String url = BASE_URL + "?languages=" + idioma + "&page_size=2";
            
            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(url))
                .header("Accept", "application/json")
                .GET()
                .build();
            
            System.out.println("üì° Buscando livros em idioma: " + idioma);
            
            HttpResponse<String> response = httpClient.send(request, 
                HttpResponse.BodyHandlers.ofString());
            
            System.out.println("üìä Status: " + response.statusCode());
            
            if (response.statusCode() == 200) {
                GutendxResponse gutendxResponse = objectMapper.readValue(
                    response.body(), GutendxResponse.class);
                
                System.out.println("üìö Livros encontrados:");
                gutendxResponse.getResults().forEach(livro -> {
                    System.out.println("   ‚Ä¢ " + livro.getTitle());
                    System.out.println("     Idiomas: " + livro.getLanguages());
                });
            }
            
        } catch (Exception e) {
            System.out.println("‚ùå Erro na busca por idioma: " + e.getMessage());
        }
        System.out.println();
    }
    
    private void demonstrarTratamentoErros() {
        System.out.println("‚ö†Ô∏è  4. TRATAMENTO DE ERROS");
        System.out.println("==========================");
        
        try {
            // URL inv√°lida para demonstrar tratamento de erro
            String url = BASE_URL + "invalid-endpoint";
            
            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(url))
                .header("Accept", "application/json")
                .GET()
                .build();
            
            System.out.println("üì° Testando endpoint inv√°lido: " + url);
            
            HttpResponse<String> response = httpClient.send(request, 
                HttpResponse.BodyHandlers.ofString());
            
            System.out.println("üìä Status Code: " + response.statusCode());
            
            // Demonstrar diferentes c√≥digos de status
            switch (response.statusCode()) {
                case 200:
                    System.out.println("‚úÖ Sucesso - Dados recebidos");
                    break;
                case 404:
                    System.out.println("‚ùå N√£o encontrado - Endpoint ou recurso inexistente");
                    break;
                case 500:
                    System.out.println("‚ùå Erro interno do servidor");
                    break;
                default:
                    System.out.println("‚ö†Ô∏è  Status inesperado: " + response.statusCode());
            }
            
            // Mostrar headers de erro se dispon√≠veis
            response.headers().map().forEach((key, values) -> {
                if (key.toLowerCase().contains("error") || 
                    key.toLowerCase().contains("warning")) {
                    System.out.println("üîç Header de erro - " + key + ": " + values);
                }
            });
            
        } catch (Exception e) {
            System.out.println("‚ùå Exce√ß√£o capturada: " + e.getClass().getSimpleName());
            System.out.println("   Mensagem: " + e.getMessage());
        }
        
        System.out.println("\nüéØ RESUMO DO TRATAMENTO DE ERROS:");
        System.out.println("   ‚Ä¢ Sempre verificar response.statusCode()");
        System.out.println("   ‚Ä¢ Usar try-catch para IOException e InterruptedException");
        System.out.println("   ‚Ä¢ Verificar headers para informa√ß√µes adicionais");
        System.out.println("   ‚Ä¢ Implementar retry logic quando apropriado");
        System.out.println("   ‚Ä¢ Log detalhado para debugging");
    }
}
