package com.exemplo.literatura.exemplo;

import com.exemplo.literatura.dto.GutendxResponse;
import com.exemplo.literatura.dto.LivroDto;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

/**
 * Exemplo pr√°tico demonstrando o uso das classes HttpClient, HttpRequest e HttpResponse
 * para consumir a API Gutendx do Project Gutenberg
 */
public class HttpClientExemplo {
    
    public static void main(String[] args) {
        System.out.println("=".repeat(70));
        System.out.println("üöÄ EXEMPLO PR√ÅTICO: HttpClient, HttpRequest e HttpResponse");
        System.out.println("=".repeat(70));
        
        // Demonstra√ß√£o completa das classes HTTP
        demonstrarHttpClasses();
    }
    
    public static void demonstrarHttpClasses() {
        try {
            // 1. CRIANDO O HttpClient
            System.out.println("\nüîß 1. CRIANDO O HttpClient");
            System.out.println("-".repeat(40));
            
            HttpClient httpClient = HttpClient.newBuilder()
                    .connectTimeout(Duration.ofSeconds(10))  // Timeout de conex√£o
                    .followRedirects(HttpClient.Redirect.NORMAL)  // Seguir redirecionamentos
                    .build();
            
            System.out.println("‚úÖ HttpClient criado com:");
            System.out.println("   ‚Ä¢ Timeout de conex√£o: 10 segundos");
            System.out.println("   ‚Ä¢ Redirecionamentos: Autom√°tico");
            System.out.println("   ‚Ä¢ Vers√£o HTTP: 1.1 e 2.0 suportadas");
            
            // 2. CONSTRUINDO O HttpRequest
            System.out.println("\nüîß 2. CONSTRUINDO O HttpRequest");
            System.out.println("-".repeat(40));
            
            String url = "https://gutendx.com/books/?search=shakespeare";
            
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(url))  // URL da requisi√ß√£o
                    .timeout(Duration.ofSeconds(30))  // Timeout da requisi√ß√£o
                    .header("Accept", "application/json")  // Cabe√ßalho Accept
                    .header("User-Agent", "Literatura-App/1.0")  // User-Agent personalizado
                    .GET()  // M√©todo HTTP GET
                    .build();
            
            System.out.println("‚úÖ HttpRequest configurado com:");
            System.out.println("   ‚Ä¢ URL: " + url);
            System.out.println("   ‚Ä¢ M√©todo: GET");
            System.out.println("   ‚Ä¢ Timeout: 30 segundos");
            System.out.println("   ‚Ä¢ Accept: application/json");
            System.out.println("   ‚Ä¢ User-Agent: Literatura-App/1.0");
            
            // 3. ENVIANDO A REQUISI√á√ÉO E OBTENDO HttpResponse
            System.out.println("\nüîß 3. ENVIANDO REQUISI√á√ÉO E OBTENDO HttpResponse");
            System.out.println("-".repeat(50));
            
            System.out.println("üì° Enviando requisi√ß√£o para a API Gutendx...");
            
            HttpResponse<String> response = httpClient.send(request, 
                    HttpResponse.BodyHandlers.ofString());
            
            System.out.println("‚úÖ Resposta recebida!");
            
            // 4. ANALISANDO A RESPOSTA
            System.out.println("\nüîß 4. ANALISANDO A HttpResponse");
            System.out.println("-".repeat(40));
            
            System.out.println("üìä Status Code: " + response.statusCode());
            System.out.println("üåê URI: " + response.uri());
            System.out.println("üìè Tamanho do corpo: " + response.body().length() + " caracteres");
            
            // Exibindo alguns cabe√ßalhos importantes
            System.out.println("\nüìã Cabe√ßalhos da Resposta:");
            response.headers().map().forEach((key, values) -> {
                if (key.toLowerCase().contains("content") || 
                    key.toLowerCase().contains("server") ||
                    key.toLowerCase().contains("date")) {
                    System.out.println("   ‚Ä¢ " + key + ": " + String.join(", ", values));
                }
            });
            
            // 5. PROCESSANDO O CORPO DA RESPOSTA
            System.out.println("\nüîß 5. PROCESSANDO O CORPO DA RESPOSTA");
            System.out.println("-".repeat(45));
            
            if (response.statusCode() == 200) {
                ObjectMapper objectMapper = new ObjectMapper();
                GutendxResponse gutendxResponse = objectMapper.readValue(
                        response.body(), GutendxResponse.class);
                
                System.out.println("‚úÖ JSON convertido para objeto Java:");
                System.out.println("   ‚Ä¢ Total de livros no cat√°logo: " + gutendxResponse.getCount());
                System.out.println("   ‚Ä¢ Livros na p√°gina atual: " + 
                        (gutendxResponse.getResults() != null ? gutendxResponse.getResults().size() : 0));
                
                if (gutendxResponse.getResults() != null && !gutendxResponse.getResults().isEmpty()) {
                    System.out.println("\nüìö Primeiros livros encontrados:");
                    for (int i = 0; i < Math.min(3, gutendxResponse.getResults().size()); i++) {
                        LivroDto livro = gutendxResponse.getResults().get(i);
                        System.out.println("   " + (i + 1) + ". " + livro.getTitle());
                        if (livro.getAuthors() != null && !livro.getAuthors().isEmpty()) {
                            System.out.println("      Autor: " + livro.getAuthors().get(0).getName());
                        }
                        System.out.println("      Downloads: " + livro.getDownloadCount());
                    }
                }
            } else {
                System.out.println("‚ùå Erro na requisi√ß√£o. Status: " + response.statusCode());
            }
            
            // 6. RESUMO DAS CLASSES UTILIZADAS
            System.out.println("\nüîß 6. RESUMO DAS CLASSES HTTP");
            System.out.println("-".repeat(40));
            
            System.out.println("üîπ HttpClient:");
            System.out.println("   ‚Ä¢ Gerencia conex√µes HTTP/HTTPS");
            System.out.println("   ‚Ä¢ Configur√°vel (timeouts, redirecionamentos, etc.)");
            System.out.println("   ‚Ä¢ Reutiliz√°vel para m√∫ltiplas requisi√ß√µes");
            
            System.out.println("\nüîπ HttpRequest:");
            System.out.println("   ‚Ä¢ Representa uma requisi√ß√£o HTTP");
            System.out.println("   ‚Ä¢ Imut√°vel ap√≥s constru√ß√£o");
            System.out.println("   ‚Ä¢ Suporte a todos os m√©todos HTTP (GET, POST, PUT, DELETE, etc.)");
            
            System.out.println("\nüîπ HttpResponse:");
            System.out.println("   ‚Ä¢ Cont√©m a resposta completa do servidor");
            System.out.println("   ‚Ä¢ Acesso a status code, cabe√ßalhos e corpo");
            System.out.println("   ‚Ä¢ Suporte a diferentes tipos de corpo (String, bytes, Stream, etc.)");
            
            System.out.println("\n" + "=".repeat(70));
            System.out.println("‚úÖ DEMONSTRA√á√ÉO CONCLU√çDA COM SUCESSO!");
            System.out.println("=".repeat(70));
            
        } catch (IOException e) {
            System.err.println("‚ùå Erro de I/O: " + e.getMessage());
        } catch (InterruptedException e) {
            System.err.println("‚ùå Requisi√ß√£o interrompida: " + e.getMessage());
            Thread.currentThread().interrupt();
        } catch (Exception e) {
            System.err.println("‚ùå Erro inesperado: " + e.getMessage());
        }
    }
}
