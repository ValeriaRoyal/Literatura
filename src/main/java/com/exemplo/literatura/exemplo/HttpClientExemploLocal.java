package com.exemplo.literatura.exemplo;

import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.URI;
import java.time.Duration;
import java.util.concurrent.CompletableFuture;

/**
 * Exemplo pr√°tico demonstrando o uso das classes HttpClient, HttpRequest e HttpResponse
 * com simula√ß√£o de diferentes cen√°rios e explica√ß√µes detalhadas.
 */
public class HttpClientExemploLocal {
    
    public static void main(String[] args) {
        System.out.println("======================================================================");
        System.out.println("üöÄ EXEMPLO PR√ÅTICO: HttpClient, HttpRequest e HttpResponse");
        System.out.println("======================================================================\n");
        
        // 1. Demonstrar cria√ß√£o e configura√ß√£o do HttpClient
        demonstrarHttpClient();
        
        // 2. Demonstrar constru√ß√£o do HttpRequest
        demonstrarHttpRequest();
        
        // 3. Demonstrar diferentes tipos de requisi√ß√µes
        demonstrarTiposRequisicoes();
        
        // 4. Demonstrar tratamento de HttpResponse
        demonstrarHttpResponse();
        
        // 5. Demonstrar requisi√ß√µes ass√≠ncronas
        demonstrarRequisicaoAssincrona();
        
        System.out.println("\nüéØ RESUMO FINAL");
        System.out.println("================");
        System.out.println("‚úÖ HttpClient: Cliente HTTP reutiliz√°vel com configura√ß√µes globais");
        System.out.println("‚úÖ HttpRequest: Representa uma requisi√ß√£o HTTP espec√≠fica");
        System.out.println("‚úÖ HttpResponse: Cont√©m a resposta do servidor com dados e metadados");
        System.out.println("‚úÖ Suporte nativo para requisi√ß√µes s√≠ncronas e ass√≠ncronas");
        System.out.println("‚úÖ Configura√ß√µes flex√≠veis de timeout, headers e redirecionamentos");
    }
    
    private static void demonstrarHttpClient() {
        System.out.println("üîß 1. CRIANDO E CONFIGURANDO O HttpClient");
        System.out.println("----------------------------------------");
        
        // HttpClient b√°sico
        HttpClient clienteBasico = HttpClient.newHttpClient();
        System.out.println("‚úÖ HttpClient b√°sico criado (configura√ß√µes padr√£o)");
        
        // HttpClient customizado
        HttpClient clienteCustomizado = HttpClient.newBuilder()
            .connectTimeout(Duration.ofSeconds(10))
            .followRedirects(HttpClient.Redirect.NORMAL)
            .version(HttpClient.Version.HTTP_2)
            .build();
        
        System.out.println("‚úÖ HttpClient customizado criado com:");
        System.out.println("   ‚Ä¢ Timeout de conex√£o: 10 segundos");
        System.out.println("   ‚Ä¢ Redirecionamentos: Autom√°tico");
        System.out.println("   ‚Ä¢ Vers√£o HTTP: 2.0 preferencial");
        System.out.println();
    }
    
    private static void demonstrarHttpRequest() {
        System.out.println("üîß 2. CONSTRUINDO HttpRequest");
        System.out.println("-----------------------------");
        
        try {
            // GET request simples
            HttpRequest requestGet = HttpRequest.newBuilder()
                .uri(URI.create("https://httpbin.org/get"))
                .GET()
                .build();
            System.out.println("‚úÖ GET Request criado para: " + requestGet.uri());
            
            // POST request com dados
            HttpRequest requestPost = HttpRequest.newBuilder()
                .uri(URI.create("https://httpbin.org/post"))
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .timeout(Duration.ofSeconds(30))
                .POST(HttpRequest.BodyPublishers.ofString("{\"nome\":\"Jo√£o\",\"idade\":30}"))
                .build();
            
            System.out.println("‚úÖ POST Request criado com:");
            System.out.println("   ‚Ä¢ Content-Type: application/json");
            System.out.println("   ‚Ä¢ Timeout: 30 segundos");
            System.out.println("   ‚Ä¢ Body: JSON com dados do usu√°rio");
            
            // PUT request
            HttpRequest requestPut = HttpRequest.newBuilder()
                .uri(URI.create("https://httpbin.org/put"))
                .header("Authorization", "Bearer token123")
                .PUT(HttpRequest.BodyPublishers.ofString("dados atualizados"))
                .build();
            System.out.println("‚úÖ PUT Request criado com Authorization header");
            
            // DELETE request
            HttpRequest requestDelete = HttpRequest.newBuilder()
                .uri(URI.create("https://httpbin.org/delete"))
                .DELETE()
                .build();
            System.out.println("‚úÖ DELETE Request criado");
            
        } catch (Exception e) {
            System.out.println("‚ùå Erro ao criar requests: " + e.getMessage());
        }
        System.out.println();
    }
    
    private static void demonstrarTiposRequisicoes() {
        System.out.println("üîß 3. TIPOS DE BODY PUBLISHERS");
        System.out.println("------------------------------");
        
        // Diferentes tipos de body
        System.out.println("üìù Tipos de dados que podem ser enviados:");
        System.out.println("   ‚Ä¢ String: HttpRequest.BodyPublishers.ofString(\"texto\")");
        System.out.println("   ‚Ä¢ Bytes: HttpRequest.BodyPublishers.ofByteArray(bytes)");
        System.out.println("   ‚Ä¢ Arquivo: HttpRequest.BodyPublishers.ofFile(path)");
        System.out.println("   ‚Ä¢ Stream: HttpRequest.BodyPublishers.ofInputStream(supplier)");
        System.out.println("   ‚Ä¢ Vazio: HttpRequest.BodyPublishers.noBody()");
        System.out.println();
    }
    
    private static void demonstrarHttpResponse() {
        System.out.println("üîß 4. TRABALHANDO COM HttpResponse");
        System.out.println("----------------------------------");
        
        System.out.println("üìä Informa√ß√µes dispon√≠veis no HttpResponse:");
        System.out.println("   ‚Ä¢ statusCode(): C√≥digo de status HTTP (200, 404, 500, etc.)");
        System.out.println("   ‚Ä¢ headers(): Mapa com todos os headers da resposta");
        System.out.println("   ‚Ä¢ body(): Corpo da resposta (String, bytes, etc.)");
        System.out.println("   ‚Ä¢ uri(): URI da requisi√ß√£o");
        System.out.println("   ‚Ä¢ version(): Vers√£o HTTP utilizada");
        System.out.println("   ‚Ä¢ request(): Requisi√ß√£o original");
        
        System.out.println("\nüìã Body Handlers mais comuns:");
        System.out.println("   ‚Ä¢ BodyHandlers.ofString(): Resposta como String");
        System.out.println("   ‚Ä¢ BodyHandlers.ofByteArray(): Resposta como array de bytes");
        System.out.println("   ‚Ä¢ BodyHandlers.ofFile(path): Salva resposta em arquivo");
        System.out.println("   ‚Ä¢ BodyHandlers.discarding(): Descarta o corpo da resposta");
        System.out.println();
    }
    
    private static void demonstrarRequisicaoAssincrona() {
        System.out.println("üîß 5. REQUISI√á√ïES ASS√çNCRONAS");
        System.out.println("-----------------------------");
        
        HttpClient client = HttpClient.newHttpClient();
        
        try {
            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create("https://httpbin.org/delay/1"))
                .GET()
                .build();
            
            System.out.println("üöÄ Enviando requisi√ß√£o ass√≠ncrona...");
            
            // Requisi√ß√£o ass√≠ncrona
            CompletableFuture<HttpResponse<String>> futureResponse = 
                client.sendAsync(request, HttpResponse.BodyHandlers.ofString());
            
            System.out.println("‚è≥ Requisi√ß√£o enviada, continuando outras tarefas...");
            System.out.println("üíº Fazendo outras opera√ß√µes enquanto aguarda...");
            
            // Simular outras opera√ß√µes
            for (int i = 1; i <= 3; i++) {
                System.out.println("   üìã Opera√ß√£o " + i + " executada");
                Thread.sleep(300);
            }
            
            // Aguardar resultado (com timeout)
            try {
                HttpResponse<String> response = futureResponse.get();
                System.out.println("‚úÖ Resposta recebida assincronamente!");
                System.out.println("   Status: " + response.statusCode());
            } catch (Exception e) {
                System.out.println("‚ùå Timeout ou erro na requisi√ß√£o ass√≠ncrona");
            }
            
        } catch (Exception e) {
            System.out.println("‚ùå Erro na demonstra√ß√£o ass√≠ncrona: " + e.getMessage());
        }
        System.out.println();
    }
}
